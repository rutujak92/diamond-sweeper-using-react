{"ast":null,"code":"var _jsxFileName = \"/Users/rutuja/Sites/minesweeper/src/Game/Board.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Cell from './Cell';\nimport { threadId } from 'worker_threads';\nexport default class Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      boardData: this.initBoardData(this.props.dimension, this.props.mines),\n      gameStatus: false,\n      mineCount: this.props.mines\n    };\n  }\n\n  createEmptyBoard(dimension) {\n    let data = [];\n\n    for (let i = 0; i < dimension; i++) {\n      data.push([]);\n\n      for (let j = 0; j < dimension; j++) {\n        data[i][j] = {\n          x: i,\n          y: j,\n          isMine: false,\n          neighbour: 0,\n          isRevealed: false,\n          isEmpty: false,\n          isFlagged: false\n        };\n      }\n    }\n\n    return data;\n  }\n\n  plantMines(data) {\n    let randomx,\n        randomy,\n        minesPlanted = 0;\n\n    while (minesPlanted < this.props.mines) {\n      randomx = this.getRandomNumber(this.props.dimension);\n      randomy = this.getRandomNumber(this.props.dimension);\n\n      if (!data[randomx][randomy].isMine) {\n        data[randomx][randomy].isMine = true;\n        minesPlanted++;\n      }\n    }\n\n    return data;\n  }\n\n  traverseBoard(x, y, board) {\n    const el = []; //up\n\n    if (x > 0) {\n      el.push(board[x - 1][y]);\n    } //down\n\n\n    if (x < this.props.height - 1) {\n      el.push(board[x + 1][y]);\n    } //left\n\n\n    if (y > 0) {\n      el.push(board[x][y - 1]);\n    } //right\n\n\n    if (y < this.props.width - 1) {\n      el.push(board[x][y + 1]);\n    } // top left\n\n\n    if (x > 0 && y > 0) {\n      el.push(board[x - 1][y - 1]);\n    } // top right\n\n\n    if (x > 0 && y < this.props.width - 1) {\n      el.push(board[x - 1][y + 1]);\n    } // bottom right\n\n\n    if (x < this.props.height - 1 && y < this.props.width - 1) {\n      el.push(board[x + 1][y + 1]);\n    } // bottom left\n\n\n    if (x < this.props.height - 1 && y > 0) {\n      el.push(board[x + 1][y - 1]);\n    }\n\n    return el;\n  }\n\n  getRandomNumber(dimension) {\n    // return Math.floor(Math.random() * dimension);\n    return Math.floor(Math.random() * 1000 + 1) % dimension;\n  }\n\n  getNeighBours(data, dimension) {\n    let updatedData = data;\n\n    for (let i = 0; i < dimension; i++) {\n      for (let j = 0; j < dimension; j++) {\n        let mine = 0;\n        let surroundingArea = this.traverseBoard(i, j, data);\n        surroundingArea.map(value => {\n          if (value.isMine) {\n            mine++;\n          }\n        });\n\n        if (mine === 0) {\n          updatedData[i][j].isEmpty = true;\n        }\n\n        updatedData[i][j].neighbour = mine;\n      }\n    }\n\n    return updatedData;\n  }\n\n  initBoardData(dimension, mines) {\n    let data = this.createEmptyBoard(dimension);\n    data = this.plantMines(data);\n    data = this.getNeighBours(data, dimension);\n    return data;\n  }\n\n  revealEmpty(x, y, board) {\n    let surroundingArea = this.traverseBoard(x, y, board);\n    surroundingArea.map(value => {\n      if (!value.isFlagged && value.isRevealed && !value.isMine) {\n        board[value.x][value.y].isRevealed = true;\n\n        if (value.isEmpty) {\n          this.revealEmpty(value.x, value.y, board);\n        }\n      }\n    });\n  }\n\n  handleCellClick(x, y) {\n    if (this.state.boardData[x][y].isRevealed || this.state.boardData[x][y].isFlagged) return null;\n\n    if (this.state.boardData[x][y].isMine) {\n      this.setState({\n        gameStatus: \"You Lost.\"\n      }); // this.revealBoard();\n\n      alert(\"game over\");\n    }\n\n    let updatedData = this.state.boardData;\n\n    if (!this.state.boardData[x][y].isRevealed) {\n      updatedData[x][y].isRevealed = true;\n      if (updatedData[x][y].isEmpty) updatedData = this.revealEmpty(x, y, updatedData);\n    }\n\n    this.setState({\n      boardData: updatedData\n    });\n  }\n\n  renderBoard(data) {\n    return data.map(datarow => {\n      return datarow.map(dataitem => {\n        return React.createElement(\"div\", {\n          key: dataitem.x * datarow.length + dataitem.y,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170\n          },\n          __self: this\n        }, React.createElement(Cell, {\n          onClick: () => this.handleCellClick(dataitem.x, dataitem.y),\n          cMenu: e => this.handleContextMenu(e, dataitem.x, dataitem.y),\n          value: dataitem,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171\n          },\n          __self: this\n        }), datarow[datarow.length - 1] === dataitem ? React.createElement(\"div\", {\n          className: \"clear\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176\n          },\n          __self: this\n        }) : \"\");\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, \"mines: \", this.state.mineCount), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, \"gameStatus: \", this.state.gameStatus)), this.renderBoard(this.state.boardData));\n  }\n\n}\nBoard.propTypes = {\n  dimension: PropTypes.number,\n  mines: PropTypes.number\n};","map":{"version":3,"sources":["/Users/rutuja/Sites/minesweeper/src/Game/Board.js"],"names":["React","PropTypes","Cell","threadId","Board","Component","constructor","props","state","boardData","initBoardData","dimension","mines","gameStatus","mineCount","createEmptyBoard","data","i","push","j","x","y","isMine","neighbour","isRevealed","isEmpty","isFlagged","plantMines","randomx","randomy","minesPlanted","getRandomNumber","traverseBoard","board","el","height","width","Math","floor","random","getNeighBours","updatedData","mine","surroundingArea","map","value","revealEmpty","handleCellClick","setState","alert","renderBoard","datarow","dataitem","length","e","handleContextMenu","render","propTypes","number"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,eAAe,MAAMC,KAAN,SAAoBJ,KAAK,CAACK,SAA1B,CAAmC;AAE1CC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACbC,MAAAA,SAAS,EAAE,KAAKC,aAAL,CAAmB,KAAKH,KAAL,CAAWI,SAA9B,EAAwC,KAAKJ,KAAL,CAAWK,KAAnD,CADE;AAEbC,MAAAA,UAAU,EAAC,KAFE;AAGbC,MAAAA,SAAS,EAAC,KAAKP,KAAL,CAAWK;AAHR,KAAb;AAKH;;AAELG,EAAAA,gBAAgB,CAACJ,SAAD,EAAY;AACxB,QAAIK,IAAI,GAAG,EAAX;;AACA,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACN,SAAd,EAAwBM,CAAC,EAAzB,EAA4B;AACxBD,MAAAA,IAAI,CAACE,IAAL,CAAU,EAAV;;AACA,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACR,SAAd,EAAwBQ,CAAC,EAAzB,EAA4B;AACxBH,QAAAA,IAAI,CAACC,CAAD,CAAJ,CAAQE,CAAR,IAAa;AACTC,UAAAA,CAAC,EAAEH,CADM;AAETI,UAAAA,CAAC,EAAEF,CAFM;AAGTG,UAAAA,MAAM,EAAE,KAHC;AAITC,UAAAA,SAAS,EAAE,CAJF;AAKTC,UAAAA,UAAU,EAAE,KALH;AAMTC,UAAAA,OAAO,EAAE,KANA;AAOTC,UAAAA,SAAS,EAAE;AAPF,SAAb;AAUC;AAEJ;;AAEL,WAAOV,IAAP;AAGH;;AACDW,EAAAA,UAAU,CAACX,IAAD,EAAM;AACZ,QAAIY,OAAJ;AAAA,QAAaC,OAAb;AAAA,QAAsBC,YAAY,GAAG,CAArC;;AAEA,WAAOA,YAAY,GAAG,KAAKvB,KAAL,CAAWK,KAAjC,EAAwC;AACxCgB,MAAAA,OAAO,GAAG,KAAKG,eAAL,CAAqB,KAAKxB,KAAL,CAAWI,SAAhC,CAAV;AACAkB,MAAAA,OAAO,GAAG,KAAKE,eAAL,CAAqB,KAAKxB,KAAL,CAAWI,SAAhC,CAAV;;AAEA,UAAI,CAAEK,IAAI,CAACY,OAAD,CAAJ,CAAcC,OAAd,EAAuBP,MAA7B,EAAsC;AAClCN,QAAAA,IAAI,CAACY,OAAD,CAAJ,CAAcC,OAAd,EAAuBP,MAAvB,GAAgC,IAAhC;AACAQ,QAAAA,YAAY;AACf;AACA;;AAEI,WAAQd,IAAR;AAER;;AACDgB,EAAAA,aAAa,CAACZ,CAAD,EAAGC,CAAH,EAAKY,KAAL,EAAW;AACpB,UAAMC,EAAE,GAAG,EAAX,CADoB,CAGxB;;AACA,QAAId,CAAC,GAAG,CAAR,EAAW;AACTc,MAAAA,EAAE,CAAChB,IAAH,CAAQe,KAAK,CAACb,CAAC,GAAG,CAAL,CAAL,CAAaC,CAAb,CAAR;AACD,KANuB,CAQxB;;;AACA,QAAID,CAAC,GAAG,KAAKb,KAAL,CAAW4B,MAAX,GAAoB,CAA5B,EAA+B;AAC7BD,MAAAA,EAAE,CAAChB,IAAH,CAAQe,KAAK,CAACb,CAAC,GAAG,CAAL,CAAL,CAAaC,CAAb,CAAR;AACD,KAXuB,CAaxB;;;AACA,QAAIA,CAAC,GAAG,CAAR,EAAW;AACTa,MAAAA,EAAE,CAAChB,IAAH,CAAQe,KAAK,CAACb,CAAD,CAAL,CAASC,CAAC,GAAG,CAAb,CAAR;AACD,KAhBuB,CAkBxB;;;AACA,QAAIA,CAAC,GAAG,KAAKd,KAAL,CAAW6B,KAAX,GAAmB,CAA3B,EAA8B;AAC5BF,MAAAA,EAAE,CAAChB,IAAH,CAAQe,KAAK,CAACb,CAAD,CAAL,CAASC,CAAC,GAAG,CAAb,CAAR;AACD,KArBuB,CAuBxB;;;AACA,QAAID,CAAC,GAAG,CAAJ,IAASC,CAAC,GAAG,CAAjB,EAAoB;AAClBa,MAAAA,EAAE,CAAChB,IAAH,CAAQe,KAAK,CAACb,CAAC,GAAG,CAAL,CAAL,CAAaC,CAAC,GAAG,CAAjB,CAAR;AACD,KA1BuB,CA4BxB;;;AACA,QAAID,CAAC,GAAG,CAAJ,IAASC,CAAC,GAAG,KAAKd,KAAL,CAAW6B,KAAX,GAAmB,CAApC,EAAuC;AACrCF,MAAAA,EAAE,CAAChB,IAAH,CAAQe,KAAK,CAACb,CAAC,GAAG,CAAL,CAAL,CAAaC,CAAC,GAAG,CAAjB,CAAR;AACD,KA/BuB,CAiCxB;;;AACA,QAAID,CAAC,GAAG,KAAKb,KAAL,CAAW4B,MAAX,GAAoB,CAAxB,IAA6Bd,CAAC,GAAG,KAAKd,KAAL,CAAW6B,KAAX,GAAmB,CAAxD,EAA2D;AACzDF,MAAAA,EAAE,CAAChB,IAAH,CAAQe,KAAK,CAACb,CAAC,GAAG,CAAL,CAAL,CAAaC,CAAC,GAAG,CAAjB,CAAR;AACD,KApCuB,CAsCxB;;;AACA,QAAID,CAAC,GAAG,KAAKb,KAAL,CAAW4B,MAAX,GAAoB,CAAxB,IAA6Bd,CAAC,GAAG,CAArC,EAAwC;AACtCa,MAAAA,EAAE,CAAChB,IAAH,CAAQe,KAAK,CAACb,CAAC,GAAG,CAAL,CAAL,CAAaC,CAAC,GAAG,CAAjB,CAAR;AACD;;AAED,WAAOa,EAAP;AACD;;AACCH,EAAAA,eAAe,CAACpB,SAAD,EAAY;AACvB;AACA,WAAO0B,IAAI,CAACC,KAAL,CAAYD,IAAI,CAACE,MAAL,KAAgB,IAAjB,GAAyB,CAApC,IAAyC5B,SAAhD;AACD;;AACD6B,EAAAA,aAAa,CAACxB,IAAD,EAAML,SAAN,EAAgB;AAC3B,QAAI8B,WAAW,GAAGzB,IAAlB;;AAEA,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACN,SAAd,EAAwBM,CAAC,EAAzB,EAA4B;AAExB,WAAI,IAAIE,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACR,SAAd,EAAwBQ,CAAC,EAAzB,EAA4B;AACxB,YAAKuB,IAAI,GAAG,CAAZ;AACA,YAAIC,eAAe,GAAG,KAAKX,aAAL,CAAmBf,CAAnB,EAAqBE,CAArB,EAAuBH,IAAvB,CAAtB;AACA2B,QAAAA,eAAe,CAACC,GAAhB,CAAoBC,KAAK,IAAE;AACvB,cAAGA,KAAK,CAACvB,MAAT,EAAgB;AACZoB,YAAAA,IAAI;AACP;AACJ,SAJD;;AAKA,YAAIA,IAAI,KAAK,CAAb,EAAgB;AACZD,UAAAA,WAAW,CAACxB,CAAD,CAAX,CAAeE,CAAf,EAAkBM,OAAlB,GAA4B,IAA5B;AACH;;AACDgB,QAAAA,WAAW,CAACxB,CAAD,CAAX,CAAeE,CAAf,EAAkBI,SAAlB,GAA8BmB,IAA9B;AACH;AACN;;AACD,WAAQD,WAAR;AACD;;AACD/B,EAAAA,aAAa,CAACC,SAAD,EAAWC,KAAX,EAAiB;AAC1B,QAAII,IAAI,GAAG,KAAKD,gBAAL,CAAsBJ,SAAtB,CAAX;AAEAK,IAAAA,IAAI,GAAG,KAAKW,UAAL,CAAgBX,IAAhB,CAAP;AACAA,IAAAA,IAAI,GAAG,KAAKwB,aAAL,CAAmBxB,IAAnB,EAAwBL,SAAxB,CAAP;AACA,WAAOK,IAAP;AACH;;AACD8B,EAAAA,WAAW,CAAC1B,CAAD,EAAGC,CAAH,EAAKY,KAAL,EAAW;AAClB,QAAIU,eAAe,GAAG,KAAKX,aAAL,CAAmBZ,CAAnB,EAAqBC,CAArB,EAAuBY,KAAvB,CAAtB;AACAU,IAAAA,eAAe,CAACC,GAAhB,CAAoBC,KAAK,IAAE;AACvB,UAAG,CAACA,KAAK,CAACnB,SAAP,IAAoBmB,KAAK,CAACrB,UAA1B,IAAwC,CAACqB,KAAK,CAACvB,MAAlD,EAAyD;AACrDW,QAAAA,KAAK,CAACY,KAAK,CAACzB,CAAP,CAAL,CAAeyB,KAAK,CAACxB,CAArB,EAAwBG,UAAxB,GAAqC,IAArC;;AACA,YAAGqB,KAAK,CAACpB,OAAT,EAAiB;AACb,eAAKqB,WAAL,CAAiBD,KAAK,CAACzB,CAAvB,EAA0ByB,KAAK,CAACxB,CAAhC,EAAmCY,KAAnC;AACH;AACJ;AACJ,KAPD;AAQH;;AACDc,EAAAA,eAAe,CAAC3B,CAAD,EAAGC,CAAH,EAAK;AAChB,QAAI,KAAKb,KAAL,CAAWC,SAAX,CAAqBW,CAArB,EAAwBC,CAAxB,EAA2BG,UAA3B,IAA4C,KAAKhB,KAAL,CAAWC,SAAX,CAAqBW,CAArB,EAAwBC,CAAxB,EAA2BK,SAA3E,EAAsF,OAAO,IAAP;;AACtF,QAAI,KAAKlB,KAAL,CAAWC,SAAX,CAAqBW,CAArB,EAAwBC,CAAxB,EAA2BC,MAA/B,EAAuC;AACnC,WAAK0B,QAAL,CAAc;AAACnC,QAAAA,UAAU,EAAE;AAAb,OAAd,EADmC,CAEpC;;AACCoC,MAAAA,KAAK,CAAC,WAAD,CAAL;AACD;;AACD,QAAIR,WAAW,GAAG,KAAKjC,KAAL,CAAWC,SAA7B;;AACA,QAAI,CAAC,KAAKD,KAAL,CAAWC,SAAX,CAAqBW,CAArB,EAAwBC,CAAxB,EAA2BG,UAAhC,EACA;AACEiB,MAAAA,WAAW,CAACrB,CAAD,CAAX,CAAeC,CAAf,EAAkBG,UAAlB,GAA+B,IAA/B;AACA,UAAIiB,WAAW,CAACrB,CAAD,CAAX,CAAeC,CAAf,EAAkBI,OAAtB,EACAgB,WAAW,GAAI,KAAKK,WAAL,CAAiB1B,CAAjB,EAAoBC,CAApB,EAAuBoB,WAAvB,CAAf;AACD;;AACD,SAAKO,QAAL,CAAc;AAACvC,MAAAA,SAAS,EAAEgC;AAAZ,KAAd;AAEL;;AAEDS,EAAAA,WAAW,CAAClC,IAAD,EAAO;AAKd,WAAOA,IAAI,CAAC4B,GAAL,CAAUO,OAAD,IAAa;AAC3B,aAAOA,OAAO,CAACP,GAAR,CAAaQ,QAAD,IAAc;AAC/B,eACE;AAAK,UAAA,GAAG,EAAEA,QAAQ,CAAChC,CAAT,GAAa+B,OAAO,CAACE,MAArB,GAA8BD,QAAQ,CAAC/B,CAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,IAAD;AACE,UAAA,OAAO,EAAE,MAAM,KAAK0B,eAAL,CAAqBK,QAAQ,CAAChC,CAA9B,EAAiCgC,QAAQ,CAAC/B,CAA1C,CADjB;AAEE,UAAA,KAAK,EAAGiC,CAAD,IAAO,KAAKC,iBAAL,CAAuBD,CAAvB,EAA0BF,QAAQ,CAAChC,CAAnC,EAAsCgC,QAAQ,CAAC/B,CAA/C,CAFhB;AAGE,UAAA,KAAK,EAAE+B,QAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,EAMID,OAAO,CAACA,OAAO,CAACE,MAAR,GAAiB,CAAlB,CAAP,KAAgCD,QAAjC,GAA6C;AAAK,UAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA7C,GAAyE,EAN5E,CADF;AASD,OAVM,CAAP;AAWD,KAZM,CAAP;AAcD;;AAEHI,EAAAA,MAAM,GAAE;AACJ,WACI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACN;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACU,KAAKhD,KAAL,CAAWM,SADrB,CADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,EAKE;AAAM,MAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACc,KAAKN,KAAL,CAAWK,UADzB,CALF,CADM,EAaF,KAAKqC,WAAL,CAAiB,KAAK1C,KAAL,CAAWC,SAA5B,CAbE,CADJ;AAqBH;;AAvM6C;AA0MlDL,KAAK,CAACqD,SAAN,GAAkB;AACd9C,EAAAA,SAAS,EAAEV,SAAS,CAACyD,MADP;AAEd9C,EAAAA,KAAK,EAAEX,SAAS,CAACyD;AAFH,CAAlB","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Cell from './Cell'\nimport { threadId } from 'worker_threads';\n\nexport default class Board extends React.Component{\n   \n        constructor(props){\n            super(props)\n            this.state = {\n            boardData: this.initBoardData(this.props.dimension,this.props.mines),\n            gameStatus:false,\n            mineCount:this.props.mines\n            }\n        }\n    \n    createEmptyBoard(dimension) {\n        let data = []\n        for(let i=0;i<dimension;i++){\n            data.push([])\n            for(let j=0;j<dimension;j++){\n                data[i][j] = {\n                    x: i,\n                    y: j,\n                    isMine: false,\n                    neighbour: 0,\n                    isRevealed: false,\n                    isEmpty: false,\n                    isFlagged: false,\n                    };\n              \n                }\n               \n            }\n           \n        return data;\n        \n\n    }\n    plantMines(data){\n        let randomx, randomy, minesPlanted = 0;\n\n        while (minesPlanted < this.props.mines) {\n        randomx = this.getRandomNumber(this.props.dimension);\n        randomy = this.getRandomNumber(this.props.dimension);\n      \n        if (!(data[randomx][randomy].isMine)) {\n            data[randomx][randomy].isMine = true;\n            minesPlanted++;\n        }\n        }\n\n             return (data);\n\n    }\n    traverseBoard(x,y,board){\n        const el = [];\n\n    //up\n    if (x > 0) {\n      el.push(board[x - 1][y]);\n    }\n\n    //down\n    if (x < this.props.height - 1) {\n      el.push(board[x + 1][y]);\n    }\n\n    //left\n    if (y > 0) {\n      el.push(board[x][y - 1]);\n    }\n\n    //right\n    if (y < this.props.width - 1) {\n      el.push(board[x][y + 1]);\n    }\n\n    // top left\n    if (x > 0 && y > 0) {\n      el.push(board[x - 1][y - 1]);\n    }\n\n    // top right\n    if (x > 0 && y < this.props.width - 1) {\n      el.push(board[x - 1][y + 1]);\n    }\n\n    // bottom right\n    if (x < this.props.height - 1 && y < this.props.width - 1) {\n      el.push(board[x + 1][y + 1]);\n    }\n\n    // bottom left\n    if (x < this.props.height - 1 && y > 0) {\n      el.push(board[x + 1][y - 1]);\n    }\n\n    return el;\n  }\n    getRandomNumber(dimension) {\n        // return Math.floor(Math.random() * dimension);\n        return Math.floor((Math.random() * 1000) + 1) % dimension;\n      }\n      getNeighBours(data,dimension){\n        let updatedData = data\n       \n        for(let i=0;i<dimension;i++){\n           \n            for(let j=0;j<dimension;j++){\n                let  mine = 0\n                let surroundingArea = this.traverseBoard(i,j,data)\n                surroundingArea.map(value=>{\n                    if(value.isMine){\n                        mine++\n                    }\n                })\n                if (mine === 0) {\n                    updatedData[i][j].isEmpty = true;\n                }\n                updatedData[i][j].neighbour = mine\n            }\n      }\n      return (updatedData)\n    }\n    initBoardData(dimension,mines){\n        let data = this.createEmptyBoard(dimension)\n\n        data = this.plantMines(data)\n        data = this.getNeighBours(data,dimension)\n        return data\n    }\n    revealEmpty(x,y,board){\n        let surroundingArea = this.traverseBoard(x,y,board)\n        surroundingArea.map(value=>{\n            if(!value.isFlagged && value.isRevealed && !value.isMine){\n                board[value.x][value.y].isRevealed = true;\n                if(value.isEmpty){\n                    this.revealEmpty(value.x, value.y, board);\n                }\n            }\n        })\n    }\n    handleCellClick(x,y){\n        if (this.state.boardData[x][y].isRevealed ||    this.state.boardData[x][y].isFlagged) return null;\n        if (this.state.boardData[x][y].isMine) {\n            this.setState({gameStatus: \"You Lost.\"});\n           // this.revealBoard();\n            alert(\"game over\");\n          }\n          let updatedData = this.state.boardData;\n          if (!this.state.boardData[x][y].isRevealed)\n          {\n            updatedData[x][y].isRevealed = true\n            if( updatedData[x][y].isEmpty)\n            updatedData  = this.revealEmpty(x, y, updatedData);\n          }\n          this.setState({boardData: updatedData});\n          \n    }\n\n    renderBoard(data) {\n    \n            \n        \n        \n        return data.map((datarow) => {\n          return datarow.map((dataitem) => {\n            return (\n              <div key={dataitem.x * datarow.length + dataitem.y}>\n                <Cell\n                  onClick={() => this.handleCellClick(dataitem.x, dataitem.y)}\n                  cMenu={(e) => this.handleContextMenu(e, dataitem.x, dataitem.y)}\n                  value={dataitem}\n                />\n                {(datarow[datarow.length - 1] === dataitem) ? <div className=\"clear\" /> : \"\"}\n              </div>);\n          })\n        });\n    \n      }\n    \n    render(){\n        return(\n            <div className=\"board\">\n      <div className=\"game-info\">\n        <span className=\"info\">\n          mines: {this.state.mineCount}\n        </span>\n        <br />\n        <span className=\"info\">\n         gameStatus: {this.state.gameStatus}\n        </span>\n      \n       \n      </div>\n      {\n          this.renderBoard(this.state.boardData)\n        }\n      \n      </div>\n   \n  \n    );\n    }\n    \n}\nBoard.propTypes = {\n    dimension: PropTypes.number,\n    mines: PropTypes.number,\n  }\n\n"]},"metadata":{},"sourceType":"module"}